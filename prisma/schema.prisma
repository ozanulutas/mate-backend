// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// @TODO: optional alanları düzenle

model Sex {
  id   Int    @id @default(autoincrement())
  name String

  user User[]

  @@map("sex")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  // 1:n
  // parentId Int?       @map("parent_id")
  // parent   Category?  @relation("parent", fields: [parentId], references: [id])
  // category Category[] @relation("parent")

  // n:m
  // parent             Category[]        @relation("parent")
  // category           Category[]        @relation("parent")
  parent CategoryRelation[] @relation("parent")
  child  CategoryRelation[] @relation("child")

  @@map("category")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
model CategoryRelation {
  id Int @id @default(autoincrement())

  parent   Category? @relation("parent", fields: [parentId], references: [id])
  parentId Int?      @map("parent_id")
  child    Category? @relation("child", fields: [childId], references: [id])
  childId  Int?      @map("child_id")

  @@map("category_relation")
}

// @TODO: optional alanları düzenle
model User {
  id        Int       @id @default(autoincrement())
  createAt  DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String?   @map("first_name")
  lastName  String?   @map("last_name")
  email     String?   @unique
  username  String
  passport  String
  info      String?
  latLon    String?   @map("lat_lon")
  birthday  DateTime?
  city      String? // @TODO: ayrı tablodan al
  country   String? // @TODO: ayrı tablodan al

  sexId      Int?     @map("sex_id")
  sex        Sex?     @relation(fields: [sexId], references: [id])
  followedBy Follow[] @relation("following")
  following  Follow[] @relation("follower")

  @@map("user")
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@map("follow")
}
