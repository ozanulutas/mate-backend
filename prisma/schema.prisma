// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// @TODO: optional alanları düzenle

model Gender {
  id   Int    @id @default(autoincrement())
  name String

  user User[]

  @@map("gender")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category      CategoryRelation[] @relation("category")
  childCategory CategoryRelation[] @relation("childCategory")
  user          UserCategory[]

  @@map("category")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
model CategoryRelation {
  id              Int      @id @default(autoincrement())
  categoryId      Int?     @map("category_id") // kendisi
  childCategoryId Int?     @map("child_category_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  category      Category? @relation("category", fields: [categoryId], references: [id])
  childCategory Category? @relation("childCategory", fields: [childCategoryId], references: [id])

  @@map("category_relation")
}

// @TODO: optional alanları düzenle
model User {
  id          Int       @id @default(autoincrement())
  username    String
  password    String
  email       String    @unique
  gsm         String?   @unique
  countryCode String?   @map("country_code")
  birthday    DateTime?
  info        String?
  genderId    Int?      @map("gender_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  gender       Gender?        @relation(fields: [genderId], references: [id])
  Location     Location[]
  followedBy   Follow[]       @relation("following") // @TODO: rename -> follower
  following    Follow[]       @relation("follower") // @TODO: rename -> followings
  userCategory UserCategory[] // @TODO: rename -> userCategories

  @@map("user")
}

model Location {
  id        Int      @id @default(autoincrement())
  latLon    String   @map("lat_lon")
  city      String? // @TODO: ayrı tablodan al
  country   String? // @TODO: ayrı tablodan al
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")

  user User @relation(fields: [userId], references: [id])

  @@map("location")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  follower  User @relation("follower", fields: [followerId], references: [id])
  following User @relation("following", fields: [followingId], references: [id])

  @@map("follow")
}

model UserCategory {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("user_category")
}
