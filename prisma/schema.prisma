// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// @TODO: optional alanları düzenle

model Gender {
  id   Int    @id @default(autoincrement())
  name String

  user User[]

  @@map("gender")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?

  category      CategoryRelation[] @relation("category")
  childCategory CategoryRelation[] @relation("childCategory")
  user          UserCategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
model CategoryRelation {
  id Int @id @default(autoincrement())

  category        Category? @relation("category", fields: [categoryId], references: [id])
  categoryId      Int?      @map("category_id") // kendisi
  childCategory   Category? @relation("childCategory", fields: [childCategoryId], references: [id])
  childCategoryId Int?      @map("child_category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category_relation")
}

// @TODO: optional alanları düzenle
model User {
  id          Int       @id @default(autoincrement())
  username    String
  password    String
  email       String    @unique
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  gsm         String?   @unique
  countryCode String?   @map("country_code")
  birthday    DateTime?
  city        String? // @TODO: ayrı tablodan al
  country     String? // @TODO: ayrı tablodan al
  info        String?
  latLon      String?   @map("lat_lon")

  genderId   Int?           @map("gender_id")
  gender     Gender?        @relation(fields: [genderId], references: [id])
  followedBy Follow[]       @relation("following")
  following  Follow[]       @relation("follower")
  category   UserCategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Follow {
  id          Int  @id @default(autoincrement())
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int  @map("follower_id")
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int  @map("following_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("follow")
}

model UserCategory {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_category")
}
