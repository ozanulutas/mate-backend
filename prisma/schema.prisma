// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// @TODO: optional alanları düzenle

model Gender {
  id   Int    @id @default(autoincrement())
  name String

  user User[]

  @@map("gender")
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  description String?
  // 1:n
  // parentId Int?       @map("parent_id")
  // parent   Category?  @relation("parent", fields: [parentId], references: [id])
  // category Category[] @relation("parent")

  // n:m
  // parent             Category[]        @relation("parent")
  // category           Category[]        @relation("parent")
  parent CategoryRelation[] @relation("parent")
  child  CategoryRelation[] @relation("child")
  user   UserCategory[]

  @@map("category")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations
model CategoryRelation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  parent   Category? @relation("parent", fields: [parentId], references: [id])
  parentId Int?      @map("parent_id")
  child    Category? @relation("child", fields: [childId], references: [id])
  childId  Int?      @map("child_id")

  @@map("category_relation")
}

// @TODO: optional alanları düzenle
model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  username    String
  password    String
  email       String    @unique
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  gsm         String?   @unique
  countryCode String?   @map("country_code")
  birthday    DateTime?
  city        String? // @TODO: ayrı tablodan al
  country     String? // @TODO: ayrı tablodan al
  info        String?
  latLon      String?   @map("lat_lon")

  genderId   Int?           @map("gender_id")
  gender     Gender?        @relation(fields: [genderId], references: [id])
  followedBy Follow[]       @relation("following")
  following  Follow[]       @relation("follower")
  category   UserCategory[]

  @@map("user")
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int      @map("follower_id")
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int      @map("following_id")

  @@map("follow")
}

model UserCategory {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int      @map("category_id")

  @@map("user_category")
}
